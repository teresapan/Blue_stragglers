# -*- sm -*-
ctypePoints 34 
   # Plot the points ($1, $2) using $3 as an index into ctype (in the range 1...255);
   # if provided, use the the palette $4 (in this case, the initial ctypes will be
   # restored after the palette is drawn)
   #
   # N.b. If you make a mistake and the ctypes are messed up, you can reset them with
   # the macro reset_ctype (to also reset the default ctype, re-open the device too)
   #
   # E.g. the macro testIntensity
   #
   local set x = $1
   local set y = $2
   local set ctypeIndex = $3

   if ($?4) {
      local set _ctype = ctype()
      $4
   }

   set _x local  set _y local  set _l local
   local set ctypes = ctypeIndex
   set ctypes = uniq(sort(ctypes))
   define i local
   do i = 0, dimen(ctypes) - 1 {
      set _l = (ctypes[$i] == ctypeIndex)
      set _x = x if(_l)
      set _y = y if(_l)
      ctype $(ctypeIndex[$i])
      ctype $(ctypeIndex[$i])
      poi _x _y
   }

   if ($?4) {
      ctype = _ctype
   }
   
   ctype 0

showCtypes 04 
   # Draw the current palette of ctypes (if $1 == "default"), or the one specified by the macro
   # $1; in this case, the initial ctypes will be restored after the palette is drawn
   #
   # If you specify $2, and it's true, draw the palette above the box
   # If you specify $3, it's the offset of the palette from the box in units of the
   # width of the box (-.05 will draw it to the left) (default: # 0.01)
   # If you specify $4, it's the palette's width in units of the width of the box 
   # (default: 0.04)
   if (!$?1) { define 1 default }
   if ('$1' != 'default') {
      local set _ctype = ctype()
      $1
   }

   if ($?2 AND $2) {
      local define pos "y"
   } else {
      local define pos "x"
   }

   if (!$?3) {
      define 3 0.01
   }
   if (!$?4) {
      define 4 0.04
   }
   local define gutter $3
   local define width $4

   if ('$pos' == 'x') {
      define llc_x ($gx2 + $gutter*($gx2 - $gx1)) # Lower Left Corner in screen coordinates
      define llc_y ($gy1)
      define urc_x ($llc_x + $width*($gx2 - $gx1)) # Upper Right Corner
      define urc_y ($gy2)
   } else {
      define llc_x ($gx1)               # Lower Left Corner in screen coordinates
      define llc_y ($gy2 + $gutter*($gy2 - $gy1))
      define urc_x ($gx2)               # Upper Right Corner
      define urc_y ($llc_y + $width*($gy2 - $gy1))
   }

   if ($gx1 == 0 && $gx2 == 32767) {    # probably a problem with this macro being interrupted
      echo Reset
      location 3500 31000 3500 31000
   }
   local define gx1 |
   local define gy1 |
   local define gx2 |
   local define gy2 |
   location 0 32767 0 32767

   define llc_x ($fx1 + ($llc_x - 0)*($fx2 - $fx1)/32767)
   define llc_y ($fy1 + ($llc_y - 0)*($fy2 - $fy1)/32767)
   define urc_x ($fx1 + ($urc_x - 0)*($fx2 - $fx1)/32767)
   define urc_y ($fy1 + ($urc_y - 0)*($fy2 - $fy1)/32767)

   local define nColor (dimen(ctype()) - 1.0) # i.e. not [0]
   if ('$pos' == 'x') {
      local define delta (($urc_y - $llc_y)/$nColor)
   } else {
      local define delta (($urc_x - $llc_x)/$nColor)
   }
   define y1 local  define y2 local
   define i local
   do i = 0, $nColor - 1 {
      ctype $($i + 1)
      
      if ('$pos' == 'x') {
         define y1 ($llc_y + $i*$delta)
         define y2 ($y1 + $delta)
         shade 0 (<$llc_x $llc_x $urc_x $urc_x $llc_x>) (<$y1 $y2 $y2 $y1 $y1>)
      } else {
         define x1 ($llc_x + $i*$delta)
         define x2 ($x1 + $delta)
         shade 0 (<$x1 $x2 $x2 $x1 $x1>) (<$llc_y $llc_y $urc_y $urc_y $llc_y>)
      }
   }

   if ($?1) {
      if('$1' != 'default') {
         ctype = _ctype
      }
   }
   
   ctype 0
   connect (<$llc_x $llc_x $urc_x $urc_x $llc_x>) (<$llc_y $urc_y $urc_y $llc_y $llc_y>)
   
   location $gx1 $gx2 $gy1 $gy2

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

myPalette
   #
   # Set ctype to a colour palette of 255 values, indexed by 1..255 inclusive
   #
   # Note that we don't use ctype 0 --- that's treated specially as the "default" colour
   #
   local set ctype0 = ctype()
   set ctype0 = ctype0[0]

   local set i = do(0, 254)             # n.b. 255 values
   local set ctype_red   = 100 + (255 - 100)/255.0*i
   local set ctype_green = i*200/255.0
   local set ctype_blue  = 0*i
   ctype = ctype0 concat (int(ctype_red) + 256*(int(ctype_green) + 256*int(ctype_blue)))

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

rainbowPalette 01
    ## Set a rainbow palette.
    #
    # One optional argument; if present and true reverse the rainbox
    if (!$?1) { define 1 0 }
    local define reverse $1

    local set r = { \
		255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 240 245 240 208 184 \
		160 136 112  88  64  32  16   0   0   0   0   0   0   0   0   0   0   0   0   0 \
		  0   0   0   0   0   0   0   0   0   0   0  32  48  64  80  96 }
    local set g = { \
		  0   2   4   8  16  32  64  96 128 144 160 176 192 208 224 230 240 255 255 255 \
		255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 240 224 208 192 \
		176 160 144 128  96  80  64  48  32  16  32  32  32  32   0   0 }
    local set b = { \
		  0   0   0   0   0   0   0   0   0   0   0   0   0   0  64  90  64   0   0   0 \
		  0   0   0   0   0   0   0   0  32  64  96 128 160 192 224 255 255 255 255 255 \
		255 255 255 255 255 255 255 255 255 255 255 224 208 192 176 160 }
    if ($reverse) {                     # reverse colors
	local set i = DIMEN(r) - 1, 0, -1
	sort { i r g b }
    } else {
	local set i = 0, DIMEN(r) - 1
    }

    local set nColor = 255
    local set i255 = do(0, nColor - 1)/(nColor - 1)*(dimen(r) - 1)
    set tmp local
    define v local
    foreach v (r g b) {
	set tmp = $v
	spline i tmp i255 $v
	set $v = int($v + 0.5)  # Don't use ctype[0] -- it's the default
	set $v = $v < 0 ? 0 : $v > 255 ? 255 : $v
    }

    set ctype0 = ctype()  set ctype0 = ctype0[0]
    ctype = ctype0 concat r + 256*(g + 256*b)

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

testIntensity 01
   if (!$?1) { define 1 myPalette }
   local define palette $1

   local set i = 1,255
   local set x = 0.05*i
   local set y = cos(0.05*i)
   lim x y
   box
   expand 2 ptype 4 3 
   ctypePoints x y i $palette
   ptype 4 1
   expand 1
   showCtypes $palette
